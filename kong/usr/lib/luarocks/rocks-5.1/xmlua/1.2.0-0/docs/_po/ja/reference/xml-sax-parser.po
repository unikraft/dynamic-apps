msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: xmlua.XMLSAXParser\n"
"---"
msgstr ""

msgid "# `xmlua.XMLSAXParser` class"
msgstr "# `xmlua.XMLSAXParser` クラス"

msgid "## Summary"
msgstr "## 概要"

msgid "It's a class for parsing a XML with SAX(Simple API for XML)."
msgstr "このクラスは、SAX(Simple API for XML)を使ってXMLをパースするクラスです。"

msgid ""
"SAX is different from DOM, processing parse documents line by line.\n"
"DOM processing parse after read all documents into memory.\n"
"So, SAX can parse documents with much less memory and fast."
msgstr ""
"SAXは、DOMと異なりドキュメントを一行ずつパースし、DOMはすべてのドキュメントをメモリに読み込んだあとにパースを行います。そのため、SAXはDOMと比"
"べて少ないメモリで高速に動作します。"

msgid "You can register your callback method which call when occured events below."
msgstr "このクラスを使って、以下のイベントが起こった際に呼ばれるコールバックメソッドを登録できます。"

msgid "Call back event list:"
msgstr "コールバックイベント一覧："

msgid "  * [`start_document`][xml-sax-parser-start-document]"
msgstr ""

msgid "  * [`end_document`][xml-sax-parser-end-document]"
msgstr ""

msgid "  * [`element_declaration`][xml-sax-parser-element-declaration]"
msgstr ""

msgid "  * [`attribute_declaration`][xml-sax-parser-attribute-declaration]"
msgstr ""

msgid "  * [`notation_declaration`][xml-sax-parser-notation-declaration]"
msgstr ""

msgid ""
"  * [`unparsed_entity_declaration`][xml-sax-parser-unparsed-entity-declaration"
"]"
msgstr ""

msgid "  * [`entity_declaration`][xml-sax-parser-entity-declaration]"
msgstr ""

msgid "  * [`internal_subset`][xml-sax-parser-internal-subset]"
msgstr ""

msgid "  * [`external_subset`][xml-sax-parser-external-subset]"
msgstr ""

msgid "  * [`reference`][xml-sax-parser-reference]"
msgstr ""

msgid "  * [`processing_instruction`][xml-sax-parser-processing-instruction]"
msgstr ""

msgid "  * [`cdata_block`][xml-sax-parser-cdata-block]"
msgstr ""

msgid "  * [`ignorable_whitespace`][xml-sax-parser-ignorable-whitespace]"
msgstr ""

msgid "  * [`comment`][xml-sax-parser-comment]"
msgstr ""

msgid "  * [`start_element`][xml-sax-parser-start-element]"
msgstr ""

msgid "  * [`end_element`][xml-sax-parser-end-element]"
msgstr ""

msgid "  * [`text`][xml-sax-parser-text]"
msgstr ""

msgid "  * [`warning`][xml-sax-parser-warning]"
msgstr ""

msgid "  * [`error`][xml-sax-parser-error]"
msgstr ""

msgid "## Class methods"
msgstr "## クラスメソッド"

msgid "### `xmlua.XMLSAXParser.new() -> XMLSAXParser` {#new}"
msgstr ""

msgid "It makes XMLSAXParser object."
msgstr "XMLSAXParser オブジェクトを作成します。"

msgid "You can make object of `xmlua.XMLSAXParser` class as below example."
msgstr "以下の例のように、`xmlua.XMLSAXParser`クラスのオブジェクトを作成できます。"

msgid "Example:"
msgstr "例："

msgid ""
"```lua\n"
"local xmlua = require(\"xmlua\")"
msgstr ""

msgid ""
"local parser = xmlua.XMLSAXParser.new()\n"
"```"
msgstr ""

msgid "## Instance methods"
msgstr "## インスタンスメソッド"

msgid "### `parse(xml) -> boolean` {#parse}"
msgstr ""

msgid "`xml`: XML string to be parsed."
msgstr "`xml`: パース対象のXML文字列"

msgid ""
"It parses the given XML.\n"
"If XML parsing is succeed, this method returns true. If XML parsing is failed,"
" this method returns false."
msgstr "与えられたXMLをパースします。XMLのパースが成功した場合は、このメソッドはtrueを返します。XMLのパースに失敗した場合は、falseを返します。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<root>Hello </root>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<root>Hello </root>\n"
"]]"

msgid ""
"-- If you want to parse text in a file,\n"
"-- you need to read file content by yourself."
msgstr ""
"-- ファイル内のテキストをパースしたい場合は\n"
"-- 自分でファイルの内容を読み込む必要があります。"

msgid "-- local xml = io.open(\"example.xml\"):read(\"*all\")"
msgstr ""

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end\n"
"```"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end\n"
"```"

msgid "### `finish() -> boolean` {#finish}"
msgstr ""

msgid "It finishes parse XML with SAX."
msgstr "SAXを使ったXMLのパースを終了します。"

msgid "If you started parse with [`parse`][parse], you should call this method."
msgstr "[`parse`][parse]を使ってパースを開始した場合は、パース完了後にこのメソッドを呼ぶ必要があります。"

msgid ""
"If you don't call this method, [`end_document`][xml-sax-parser-end-document] e"
"vent isn't occurred."
msgstr "このメソッドを呼ばないと、[`end_document`][xml-sax-parser-end-document]イベントは発生しません。"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end\n"

msgid ""
"parser:finish()\n"
"```"
msgstr ""

msgid "## Property"
msgstr "## プロパティ"

msgid "### `start_document` {#start-document}"
msgstr ""

msgid "It registers user call back function as below."
msgstr "以下のようにコールバック関数を登録できます。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse start document element."
msgstr "document要素のパースを開始したときに、登録した関数が呼び出されます。"

msgid "Registered function is called, when parse `<root>` in below example."
msgstr "以下の例だと、`<root>`をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<xml>Hello</xml>\n"
"]]"
msgstr ""

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  print(\"Start document\")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  print(\"Start document\")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid "Result of avobe example as blow."
msgstr "上記の例の結果は以下のようになります。"

msgid ""
"```\n"
"Start document\n"
"```"
msgstr ""

msgid "### `end_document` {#end-document}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.end_document = function()\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.end_document = function()\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when call `xmlua.XMLSAXParser.finish`."
msgstr "`xmlua.XMLSAXParser.finish` を呼び出した時に、登録した関数が呼び出されます。"

msgid "Registered function is called, when parse `parser:finish()` in below example."
msgstr "以下の例では、`parser:finish()`を実行したときに登録した関数が呼び出されます。"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.end_document = function()\n"
"  print(\"End document\")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.end_document = function()\n"
"  print(\"End document\")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"End document\n"
"```"
msgstr ""

msgid "### `element_declaration` {#element-declaration}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.element_declaration = function(name, type, content)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.element_declaration = function(name, type, content)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse element declaration in DTD."
msgstr "DTD内のelement宣言をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<!ELEMENT test (A,B*,C+)>` in below"
" example."
msgstr "以下の例では、`<!ELEMENT test (A,B*,C+)>`をパースした際に登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ELEMENT test (A,B*,C+)>\n"
"]>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ELEMENT test (A,B*,C+)>\n"
"]>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.element_declaration = function(name,\n"
"                                      element_type,\n"
"                                      content)\n"
"  print(\"Element name: \" .. name)\n"
"  print(\"Element type: \" .. element_type)\n"
"  if element_type == \"EMPTY\" then\n"
"    return\n"
"  end\n"
"  print(\"Content:\")\n"
"  print_element_content(content, \"  \")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.element_declaration = function(name,\n"
"                                      element_type,\n"
"                                      content)\n"
"  print(\"Element name: \" .. name)\n"
"  print(\"Element type: \" .. element_type)\n"
"  if element_type == \"EMPTY\" then\n"
"    return\n"
"  end\n"
"  print(\"Content:\")\n"
"  print_element_content(content, \"  \")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Element name: test\n"
"Element type: ELEMENT\n"
"Content:\n"
"  type: SEQUENCE\n"
"  occur: ONCE\n"
"  child[1]:\n"
"    type: ELEMENT\n"
"    occur: ONCE\n"
"    prefix: \n"
"    name: A\n"
"  child[2]:\n"
"    type: ELEMENT\n"
"    occur: MULTIPLE\n"
"    prefix: \n"
"    name: B\n"
"  child[3]:\n"
"    type: ELEMENT\n"
"    occur: PLUS\n"
"    prefix: \n"
"    name: C\n"
"```"
msgstr ""

msgid "### `attribute_declaration` {#attribute-declaration}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.attribute_declaration = function(name,\n"
"                                        attribute_name,\n"
"                                        attribute_type,\n"
"                                        default_value_type,\n"
"                                        default_value,\n"
"                                        enumerated_values)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.attribute_declaration = function(name,\n"
"                                        attribute_name,\n"
"                                        attribute_type,\n"
"                                        default_value_type,\n"
"                                        default_value,\n"
"                                        enumerated_values)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse attribute declaration in DTD."
msgstr "DTD内のattribute宣言をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<!ATTLIST A B (yes|no) \"no\">` in be"
"low example."
msgstr "以下の例では、`<!ATTLIST A B (yes|no) \"no\">`をパースした際に登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ATTLIST A B (yes|no) \"no\">\n"
"]>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ATTLIST A B (yes|no) \"no\">\n"
"]>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.attribute_declaration = function(name,\n"
"                                        attribute_name,\n"
"                                        attribute_type,\n"
"                                        default_value_type,\n"
"                                        default_value,\n"
"                                        enumerated_values)\n"
"  print(\"Element name: \" .. name)\n"
"  print(\"Attribute name: \" .. attribute_name)\n"
"  print(\"Attribute type: \" .. attribute_type)\n"
"  if default_value then\n"
"    print(\"Default value type: \" .. default_value_type)\n"
"    print(\"Default value: \" .. default_value)\n"
"  end\n"
"  for _, v in pairs(enumerated_values) do\n"
"    print(\"Enumrated value: \" .. v)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.attribute_declaration = function(name,\n"
"                                        attribute_name,\n"
"                                        attribute_type,\n"
"                                        default_value_type,\n"
"                                        default_value,\n"
"                                        enumerated_values)\n"
"  print(\"Element name: \" .. name)\n"
"  print(\"Attribute name: \" .. attribute_name)\n"
"  print(\"Attribute type: \" .. attribute_type)\n"
"  if default_value then\n"
"    print(\"Default value type: \" .. default_value_type)\n"
"    print(\"Default value: \" .. default_value)\n"
"  end\n"
"  for _, v in pairs(enumerated_values) do\n"
"    print(\"Enumrated value: \" .. v)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Attribute name: B\n"
"Attribute type: 9\n"
"Default value type: 1\n"
"Default value: no\n"
"Enumrated value: yes\n"
"Enumrated value: no\n"
"```"
msgstr ""

msgid "### `notation_declaration` {#notation-declaration}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.notation_declaration = function(name,\n"
"                                       public_id,\n"
"                                       system_id)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.notation_declaration = function(name,\n"
"                                       public_id,\n"
"                                       system_id)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse notation declaration in DTD."
msgstr "DTD内のnotation宣言をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<!NOTATION test SYSTEM \"Test\">` in "
"below example."
msgstr "以下の例では、`<!NOTATION test SYSTEM \"Test\">`をパースした際に登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!NOTATION test SYSTEM \"Test\">\n"
"]>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!NOTATION test SYSTEM \"Test\">\n"
"]>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.notation_declaration = function(name,\n"
"                                       public_id,\n"
"                                       system_id)\n"
"  print(\"Notation name: \" .. name)\n"
"  if public_id ~= nil then\n"
"    print(\"Notation public id: \" .. public_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Notation system id: \" .. system_id)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.notation_declaration = function(name,\n"
"                                       public_id,\n"
"                                       system_id)\n"
"  print(\"Notation name: \" .. name)\n"
"  if public_id ~= nil then\n"
"    print(\"Notation public id: \" .. public_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Notation system id: \" .. system_id)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Notation name: test\n"
"Notation system id: Test\n"
"```"
msgstr ""

msgid "### `unparsed_entity_declaration` {#unparsed-entity-declaration}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.unparsed_entity_declaration = function(name,\n"
"                                              public_id,\n"
"                                              system_id,\n"
"                                              notation_name)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.unparsed_entity_declaration = function(name,\n"
"                                              public_id,\n"
"                                              system_id,\n"
"                                              notation_name)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid ""
"Registered function is called, when parse unparsed external entity declaration"
" in DTD."
msgstr "DTD内の未解析の外部エンティティをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<!ENTITY test SYSTEM \"file:///usr/l"
"ocal/share/test.gif\" NDATA gif>` in below example."
msgstr ""
"以下の例では、`<!ENTITY test SYSTEM \"file:///usr/local/share/test.gif\" NDATA gif>`をパー"
"スした際に登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ENTITY test SYSTEM \"file:///usr/local/share/test.gif\" NDATA gif>\n"
"]>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ENTITY test SYSTEM \"file:///usr/local/share/test.gif\" NDATA gif>\n"
"]>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.unparsed_entity_declaration = function(name,\n"
"                                              public_id,\n"
"                                              system_id,\n"
"                                              notation_name)\n"
"  print(\"Unparserd entity name: \" .. name)\n"
"  if public_id ~= nil then\n"
"    print(\"Unparserd entity public id: \" .. public_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Unparserd entity system id: \" .. system_id)\n"
"  end\n"
"  print(\"Unparserd entity notation_name: \" .. notation_name)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.unparsed_entity_declaration = function(name,\n"
"                                              public_id,\n"
"                                              system_id,\n"
"                                              notation_name)\n"
"  print(\"Unparserd entity name: \" .. name)\n"
"  if public_id ~= nil then\n"
"    print(\"Unparserd entity public id: \" .. public_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Unparserd entity system id: \" .. system_id)\n"
"  end\n"
"  print(\"Unparserd entity notation_name: \" .. notation_name)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Unparserd entity name: test\n"
"Unparserd entity system id: file:///usr/local/share/test.gif\n"
"Unparserd entity notation_name: gif\n"
"```"
msgstr ""

msgid "### `entity_declaration` {#entity-declaration}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.entity_declaration = function(name,\n"
"                                     entity_type,\n"
"                                     public_id,\n"
"                                     system_id,\n"
"                                     content)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.entity_declaration = function(name,\n"
"                                     entity_type,\n"
"                                     public_id,\n"
"                                     system_id,\n"
"                                     content)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse entity declaration in DTD."
msgstr "DTD内のentity宣言をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<!ENTITY test \"This is test.\">` in "
"below example."
msgstr "以下の例では、`<!ENTITY test \"This is test.\">`をパースした際に登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ENTITY test \"This is test.\">\n"
"]>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ENTITY test \"This is test.\">\n"
"]>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.entity_declaration = function(name,\n"
"                                     entity_type,\n"
"                                     public_id,\n"
"                                     system_id,\n"
"                                     content)\n"
"  print(\"Entity name: \" .. name)\n"
"  print(\"Entity type: \" .. entity_type)\n"
"  if public_id ~= nil then\n"
"    print(\"Entity public id: \" .. public_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Entity system id: \" .. system_id)\n"
"  end\n"
"  print(\"Entity content: \" .. content)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.entity_declaration = function(name,\n"
"                                     entity_type,\n"
"                                     public_id,\n"
"                                     system_id,\n"
"                                     content)\n"
"  print(\"Entity name: \" .. name)\n"
"  print(\"Entity type: \" .. entity_type)\n"
"  if public_id ~= nil then\n"
"    print(\"Entity public id: \" .. public_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Entity system id: \" .. system_id)\n"
"  end\n"
"  print(\"Entity content: \" .. content)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Entity name: test\n"
"Entity type: 1\n"
"Entity content: This is test.\n"
"```"
msgstr ""

msgid "### `internal_subset` {#internal-subset}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.internal_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.internal_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse internal subset."
msgstr "内部サブセットをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<!DOCTYPE example[...]>` in below e"
"xample."
msgstr "以下の例では、`<!DOCTYPE example[...]>`をパースした際に登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ENTITY test \"This is test.\">\n"
"]>\n"
"<example/>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE example [\n"
"  <!ENTITY test \"This is test.\">\n"
"]>\n"
"<example/>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.internal_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  print(\"Internal subset name: \" .. name)\n"
"  if external_id ~= nil then\n"
"    print(\"Internal subset external id: \" .. external_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Internal subset system id: \" .. system_id)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.internal_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  print(\"Internal subset name: \" .. name)\n"
"  if external_id ~= nil then\n"
"    print(\"Internal subset external id: \" .. external_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"Internal subset system id: \" .. system_id)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Internal subset name: example\n"
"```"
msgstr ""

msgid "### `external_subset` {#external-subset}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.external_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.external_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse external subset."
msgstr "外部サブセットをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n"
"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n"
"<html></html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.external_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  print(\"External subset name: \" .. name)\n"
"  if external_id ~= nil then\n"
"    print(\"External subset external id: \" .. external_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"External subset system id: \" .. system_id)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.external_subset = function(name,\n"
"                                  external_id,\n"
"                                  system_id)\n"
"  print(\"External subset name: \" .. name)\n"
"  if external_id ~= nil then\n"
"    print(\"External subset external id: \" .. external_id)\n"
"  end\n"
"  if system_id ~= nil then\n"
"    print(\"External subset system id: \" .. system_id)\n"
"  end\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"External subset name: html\n"
"External subset external id: -//W3C//DTD XHTML 1.0 Transitional//EN\n"
"External subset system id: http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional"
".dtd\n"
"```"
msgstr ""

msgid "### `reference` {#reference}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.reference = function(entity_name)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.reference = function(entity_name)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse reference."
msgstr "参照をパースしたときに、登録した関数が呼び出されます。"

msgid "Registered function is called, when parse `&ref;` in below example."
msgstr "以下の例だと、`&ref;`をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<!DOCTYPE test [\n"
"  <!ENTITY ref \"Reference\">\n"
"]>\n"
"<test>&ref;</test>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<!DOCTYPE test [\n"
"  <!ENTITY ref \"Reference\">\n"
"]>\n"
"<test>&ref;</test>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.reference = function(entity_name)\n"
"  print(\"Reference entity name: \" .. entity_name)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.reference = function(entity_name)\n"
"  print(\"Reference entity name: \" .. entity_name)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Reference entity name: ref\n"
"```"
msgstr ""

msgid "### `processing_instruction` {#processing-instruction}"
msgstr ""

msgid ""
"You can get attributes of processing instruction as argument of your call back"
". Attributes of processing instruction are `target` and `data_list` in below e"
"xample."
msgstr ""
"コールバック関数の引数として、Processing instruction要素の属性を取得することができます。Processing Instruction要"
"素の属性は、以下の例では、`target`と`data_list`です。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.processing_instruction = function(target, data_list)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.processing_instruction = function(target, data_list)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse processing instruction element."
msgstr "Processing Instruction要素が解析されたときに、登録したコールバック関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<?target This is PI>` in below exam"
"ple."
msgstr "以下の例では、`<?target This is PI>`をパースした際に登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<?xml-stylesheet href=\"www.test.com/test-style.xsl\" type=\"text/xsl\" ?>\n"
"]]"
msgstr ""

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.processing_instruction = function(target, data_list)\n"
"  print(\"Processing instruction target: \"..target)\n"
"  print(\"Processing instruction data: \"..data_list)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.processing_instruction = function(target, data_list)\n"
"  print(\"Processing instruction target: \"..target)\n"
"  print(\"Processing instruction data: \"..data_list)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Processing instruction target: target\n"
"Processing instruction data: This is PI\n"
"```"
msgstr ""

msgid "### `cdata_block` {#cdata-block}"
msgstr ""

msgid ""
"You can get string in CDATA section as argument of your call back. String in C"
"DATA section is `cdata_block`."
msgstr "コールバック関数の引数として、CDATAセクション内の文字列を取得できます。以下の例では、CDATAセクション内の文字列は、`cdata_block`です。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.cdata_block = function(cdata_block)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.cdata_block = function(cdata_block)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse CDATA section."
msgstr "CDATAセクションをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<![CDATA[<p>Hello world!</p>]]>` in"
" below example."
msgstr "以下の例だと、`<![CDATA[<p>Hello world!</p>]]>`をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [=[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xml>\n"
"<![CDATA[<p>Hello world!</p>]]>\n"
"</xml>\n"
"]=]"
msgstr ""
"-- パースするXML\n"
"local xml = [=[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xml>\n"
"<![CDATA[<p>Hello world!</p>]]>\n"
"</xml>\n"
"]=]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.cdata_block = function(cdata_block)\n"
"  print(\"CDATA block: \"..cdata_block)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.cdata_block = function(cdata_block)\n"
"  print(\"CDATA block: \"..cdata_block)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"CDATA block: <p>Hello world!</p>\n"
"```"
msgstr ""

msgid "### `ignorable_whitespace` {#ignorable-whitespace}"
msgstr ""

msgid ""
"You can get ignorable whitespace in XML as argument of your call back. ignorab"
"le whitespace in XML is `ignorable_whitespace` in below example."
msgstr ""
"コールバック関数の引数として、XML内の無視できる空白を取得することができます。以下の例では、無視できる空白は、`ignorable_whitespace`"
"です。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.ignorable_whitespace = function(ignorable_whitespace)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.ignorable_whitespace = function(ignorable_whitespace)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse ignorable whitespace"
msgstr "無視できる空白をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xml>\n"
"  <test></test>\n"
"</xml>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xml>\n"
"  <test></test>\n"
"</xml>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.ignorable_whitespace = function(ignorable_whitespace)\n"
"  print(\"Ignorable whitespace: \"..\"\\\"\"..ignorable_whitespace..\"\\\"\")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.ignorable_whitespace = function(ignorable_whitespace)\n"
"  print(\"Ignorable whitespace: \"..\"\\\"\"..ignorable_whitespace..\"\\\"\")\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Ignorable whitespace: \"\n"
"  \"\n"
"Ignorable whitespace: \"\n"
"\"\n"
"```"
msgstr ""

msgid "### `comment` {#comment}"
msgstr ""

msgid ""
"You can get comment of XML as argument of your call back. comment in XML is `c"
"omment` in below example."
msgstr "コールバック関数の引数として、XML内のコメントを取得できます。以下の例では、`comment`がXML内のコメントです。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.comment = function(comment)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.comment = function(comment)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse XML's comment."
msgstr "XMLのコメントをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xml><!--This is comment--></xml>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xml><!--This is comment--></xml>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.comment = function(comment)\n"
"  print(\"Comment: \"..comment)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.comment = function(comment)\n"
"  print(\"Comment: \"..comment)\n"
"end\n"
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"```\n"
"Comment:  This is comment.\n"
"```"
msgstr ""

msgid "### `start_element` {#start-element}"
msgstr ""

msgid "You can get name and attributes of elements as argument of your call back."
msgstr "コールバック関数の引数として、要素の名前と属性を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.start_element = function(local_name,\n"
"                                prefix,\n"
"                                uri,\n"
"                                namespaces,\n"
"                                attributes)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse element."
msgstr "要素をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xhtml:html xmlns:xhtml=\"http://www.w3.org/1999/xhtml\"\n"
"  id=\"top\"\n"
"  xhtml:class=\"top-level\">\n"
"]]"
msgstr ""

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.start_element = function(local_name,\n"
"                                prefix,\n"
"                                uri,\n"
"                                namespaces,\n"
"                                attributes)\n"
"  print(\"Start element: \" .. local_name)\n"
"  if prefix then\n"
"    print(\"  prefix: \" .. prefix)\n"
"  end\n"
"  if uri then\n"
"    print(\"  URI: \" .. uri)\n"
"  end\n"
"  for namespace_prefix, namespace_uri in pairs(namespaces) do\n"
"    if namespace_prefix  == \"\" then\n"
"      print(\"  Default namespace: \" .. namespace_uri)\n"
"    else\n"
"      print(\"  Namespace: \" .. namespace_prefix .. \": \" .. namespace_uri)\n"
"    end\n"
"  end\n"
"  if attributes then\n"
"    if #attributes > 0 then\n"
"      print(\"  Attributes:\")\n"
"      for i, attribute in pairs(attributes) do\n"
"        local name\n"
"        if attribute.prefix then\n"
"          name = attribute.prefix .. \":\" .. attribute.local_name\n"
"        else\n"
"          name = attribute.local_name\n"
"        end\n"
"        if attribute.uri then\n"
"          name = name .. \"{\" .. attribute.uri .. \"}\"\n"
"        end\n"
"        print(\"    \" .. name .. \": \" .. attribute.value)\n"
"      end\n"
"    end\n"
"  end\n"
"end"
msgstr ""

msgid ""
"local success = parser:parse(xml)\n"
"if not success then\n"
"  print(\"Failed to parse XML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Start element: html\n"
"  prefix: xhtml\n"
"  URI: http://www.w3.org/1999/xhtml\n"
"  Namespace: xhtml: http://www.w3.org/1999/xhtml\n"
"  Attributes:\n"
"    id: top\n"
"    xhtml:class{http://www.w3.org/1999/xhtml}: top-level\n"
"```"
msgstr ""

msgid "### `end_element` {#end-element}"
msgstr ""

msgid "You can get name of elements as argument of your call back."
msgstr "コールバック関数の引数として、要素の名前を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.end_element = function(local_name,\n"
"                              prefix,\n"
"                              uri)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse end element."
msgstr "要素の終わりをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<xhtml:html xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n"
"</xhtml:html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.end_element = function(name)\n"
"  print(\"End element: \" .. local_name)\n"
"  if prefix then\n"
"    print(\"  prefix: \" .. prefix)\n"
"  end\n"
"  if uri then\n"
"    print(\"  URI: \" .. uri)\n"
"  end\n"
"end"
msgstr ""

msgid ""
"```\n"
"End element: html\n"
"  prefix: xhtml\n"
"  URI: http://www.w3.org/1999/xhtml\n"
"```"
msgstr ""

msgid "### `text` {#text}"
msgstr ""

msgid "You can get text of text element as argument of your call back."
msgstr "コールバック関数の引数として、`text`要素の値を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.text = function(text)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.text = function(text)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse text element."
msgstr "`text`要素をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<book>\n"
"  <title>Hello World</title>\n"
"</book>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<book>\n"
"  <title>Hello World</title>\n"
"</book>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.text = function(text)\n"
"  print(\"Text: \" .. text)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Text:   \n"
"Text: Hello World\n"
"```"
msgstr ""

msgid "### `warning` {#warning}"
msgstr ""

msgid ""
"You can get warning messages of parse XML with SAX as argument of your call ba"
"ck."
msgstr "コールバック関数の引数として、警告メッセージを取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.warning = function(message)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.warning = function(message)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called when occurring warning by parsing xml."
msgstr "登録した関数は、xmlの解析中に警告が発生した時に呼ばれます。"

msgid ""
"-- XML to be parsed\n"
"  local xml = [[\n"
"<?xml version=\"1.0\"?>\n"
"<?xmlo ?>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"  local xml = [[\n"
"<?xml version=\"1.0\"?>\n"
"<?xmlo ?>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.warning = function(message)\n"
"  print(\"Warning message: \" .. message)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.warning = function(message)\n"
"  print(\"Warning message: \" .. message)\n"
"end"

msgid ""
"```\n"
"\"xmlParsePITarget: invalid name prefix 'xml'\n"
"\"\n"
"```"
msgstr ""

msgid ""
"Some warning are output only when `xmlParserCtxt.pedantic` is enable.\n"
"To output, those warnings, use `is_pedantic` as follows."
msgstr ""
"いくつかの警告は、`xmlParserCtxt.pedantic`が有効なときのみ出力されます。これらの警告を出力するためには、`is_pedantic`を"
"以下のように使用します。"

msgid ""
"```lua\n"
"parser.is_pedantic = true\n"
"```"
msgstr ""

msgid ""
"-- XML to be parsed\n"
"  local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE root SYSTEM \"file:///usr/local/share/test.dtd\" [\n"
"<!ENTITY test \"This is test.\">\n"
"<!ENTITY test \"This is test.\">\n"
"]>\n"
"<root>\n"
"       <data>&test;</data>\n"
"</root>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"  local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE root SYSTEM \"file:///usr/local/share/test.dtd\" [\n"
"<!ENTITY test \"This is test.\">\n"
"<!ENTITY test \"This is test.\">\n"
"]>\n"
"<root>\n"
"       <data>&test;</data>\n"
"</root>\n"
"]]"

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.is_pedantic = true\n"
"parser.warning = function(message)\n"
"  print(\"Warning message: \" .. message)\n"
"  print(\"Pedantic :\", parser.is_pedantic)\n"
"end"
msgstr ""
"-- SAXを使ってXMLをパースする。\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.is_pedantic = true\n"
"parser.warning = function(message)\n"
"  print(\"Warning message: \" .. message)\n"
"  print(\"Pedantic :\", parser.is_pedantic)\n"
"end"

msgid ""
"```\n"
"Warning message: Entity(test) already defined in the internal subset\n"
"Pedantic :\ttrue\n"
"```"
msgstr ""

msgid "### `error` {#error}"
msgstr ""

msgid ""
"You can get error information of parse XML with SAX as argument of your call b"
"ack."
msgstr "コールバック関数の引数として、エラー情報を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.error = function(error)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.error = function(error)\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid ""
"Registered function is called, when parse failed.\n"
"Error information structure as below."
msgstr "パースが失敗したときに、登録した関数が呼び出されます。エラー情報の構造は以下の通りです。"

msgid ""
"```\n"
"{\n"
"  domain\n"
"  code\n"
"  message\n"
"  level\n"
"  line\n"
"}\n"
"```"
msgstr ""

msgid ""
"`domain` has values as specific as below.\n"
"[`Error domain list`][error-domain-list]"
msgstr "`domain`の値は、[`Error domain 一覧`][error-domain-list]に定義されています。"

msgid ""
"`code` has values as specific as below.\n"
"[`Error code list`][error-code-list]"
msgstr "`code`の値は、[`Error code 一覧`][error-code-list]に定義されています。"

msgid ""
"`level` has values as specific as below.\n"
"[`Error level list`][error-level-list]"
msgstr "`level`の値は、[`Error level 一覧`][error-level-list]に定義されています。"

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<>\n"
"]]"
msgstr ""

msgid ""
"-- Parses XML with SAX\n"
"local parser = xmlua.XMLSAXParser.new()\n"
"parser.error = function(error)\n"
"  print(\"Error domain : \" .. error.domain)\n"
"  print(\"Error code   : \" .. error.code)\n"
"  print(\"Error message: \" .. error.message)\n"
"  print(\"Error level  : \" .. error.level)\n"
"  print(\"Error line   : \" .. error.line)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Error domain :\t1\n"
"Error code :\t5\n"
"Error message :Extra content at the end of the document"
msgstr ""

msgid ""
"Error level :\t3\n"
"Error line :\t1\n"
"Failed to parse XML with SAX\n"
"```"
msgstr ""

msgid ""
"[xml-sax-parser-start-document]:#start-document\n"
"[xml-sax-parser-end-document]:#end-document\n"
"[xml-sax-parser-element-declaration]:#element-declaration\n"
"[xml-sax-parser-attribute-declaration]:#attribute-declaration\n"
"[xml-sax-parser-notation-declaration]:#notation-declaration\n"
"[xml-sax-parser-unparsed-entity-declaration]:#unparsed-entity-declaration\n"
"[xml-sax-parser-entity-declaration]:#entity-declaration\n"
"[xml-sax-parser-internal-subset]:#internal-subset\n"
"[xml-sax-parser-external-subset]:#external-subset\n"
"[xml-sax-parser-reference]:#reference\n"
"[xml-sax-parser-processing-instruction]:#processing-instruction\n"
"[xml-sax-parser-cdata-block]:#cdata-block\n"
"[xml-sax-parser-ignorable-whitespace]:#ignorable-whitespace\n"
"[xml-sax-parser-comment]:#comment\n"
"[xml-sax-parser-start-element]:#start-element\n"
"[xml-sax-parser-end-element]:#end-element\n"
"[xml-sax-parser-text]:#text\n"
"[xml-sax-parser-warning]:#warning\n"
"[xml-sax-parser-error]:#error"
msgstr ""

msgid "[parse]:#parse"
msgstr ""

msgid ""
"[error-domain-list]:error-domain-list.html\n"
"[error-code-list]:error-code-list.html\n"
"[error-level-list]:error-level-list.html"
msgstr ""
