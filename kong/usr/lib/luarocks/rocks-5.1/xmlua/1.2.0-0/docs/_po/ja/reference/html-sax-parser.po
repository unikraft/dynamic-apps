msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: xmlua.HTMLSAXParser\n"
"---"
msgstr ""

msgid "# `xmlua.HTMLSAXParser` class"
msgstr "# `xmlua.HTMLSAXParser` クラス"

msgid "## Summary"
msgstr "## 概要"

msgid "It's a class for parsing a HTML with SAX(Simple API for XML)."
msgstr "このクラスは、SAX(Simple API for XML)を使ってHTMLをパースするクラスです。"

msgid ""
"SAX is different from DOM, processing parse documents line by line.\n"
"DOM processing parse after read all documents into memory.\n"
"So, SAX can parse documents with much less memory and fast."
msgstr ""
"SAXは、DOMと異なりドキュメントを一行ずつパースし、DOMはすべてのドキュメントをメモリに読み込んだあとにパースを行います。そのため、SAXはDOMと比"
"べて少ないメモリで高速に動作します。"

msgid "You can register your callback method which call when occured events below."
msgstr "このクラスを使って、以下のイベントが起こった際に呼ばれるコールバックメソッドを登録できます。"

msgid "Call back event list:"
msgstr "コールバックイベント一覧："

msgid "  * [`start_document`][html-sax-parser-start-document]"
msgstr ""

msgid "  * [`end_document`][html-sax-parser-end-document]"
msgstr ""

msgid "  * [`processing_instruction`][html-sax-parser-processing-instruction]"
msgstr ""

msgid "  * [`cdata_block`][html-sax-parser-cdata-block]"
msgstr ""

msgid "  * [`ignorable_whitespace`][html-sax-parser-ignorable-whitespace]"
msgstr ""

msgid "  * [`comment`][html-sax-parser-comment]"
msgstr ""

msgid "  * [`start_element`][html-sax-parser-start-element]"
msgstr ""

msgid "  * [`end_element`][html-sax-parser-end-element]"
msgstr ""

msgid "  * [`text`][html-sax-parser-text]"
msgstr ""

msgid "  * [`error`][html-sax-parser-error]"
msgstr ""

msgid "## Class methods"
msgstr "## クラスメソッド"

msgid "### `xmlua.HTMLSAXParser.new() -> HTMLSAXParser` {#new}"
msgstr ""

msgid "It makes HTMLSAXParser object."
msgstr "HTMLSAXParser オブジェクトを作成します。"

msgid "You can make object of `xmlua.HTMLSAXParser` class as below example."
msgstr "以下の例のように、`xmlua.HTMLSAXParser`クラスのオブジェクトを作成できます。"

msgid "Example:"
msgstr "例："

msgid ""
"```lua\n"
"local xmlua = require(\"xmlua\")"
msgstr ""

msgid ""
"local parser = xmlua.HTMLSAXParser.new()\n"
"```"
msgstr ""

msgid "## Instance methods"
msgstr "## インスタンスメソッド"

msgid "### `parse(html) -> boolean` {#parse}"
msgstr ""

msgid "`html`: HTML string to be parsed."
msgstr "`html`: パース対象のHTML文字列。"

msgid ""
"It parses the given HTML.\n"
"If HTML parsing is succeed, this method returns true. If HTML parsing is faile"
"d, this method returns false."
msgstr ""
"与えられたHTMLをパースします。HTMLのパースが成功した場合は、このメソッドはtrueを返します。HTMLのパースに失敗した場合は、falseを返します"
"。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<html>\n"
"  <body>\n"
"    <p>Hello</p>\n"
"  </body>\n"
"</html>\n"
"]]"
msgstr ""
"-- パース対象のHTML\n"
"local html = [[\n"
"<html>\n"
"  <body>\n"
"    <p>Hello</p>\n"
"  </body>\n"
"</html>\n"
"]]"

msgid ""
"-- If you want to parse text in a file,\n"
"-- you need to read file content by yourself."
msgstr ""
"-- ファイル内のテキストをパースしたい場合は\n"
"-- 自分でファイルの内容を読み込む必要があります。"

msgid "-- local html = io.open(\"example.html\"):read(\"*all\")"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end\n"
"```"
msgstr ""
"-- SAXを使ってHTMLをパースする。\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end\n"
"```"

msgid "### `finish() -> boolean` {#finish}"
msgstr ""

msgid "It finishes parse HTML with SAX."
msgstr "SAXを使ったHTMLのパースを終了します。"

msgid "If you started parse with [`parse`][parse], you should call this method."
msgstr "[`parse`][parse]を使ってパースを開始した場合は、パース完了後にこのメソッドを呼ぶ必要があります。"

msgid ""
"If you don't call this method, [`end_document`][html-sax-parser-end-document] "
"event isn't occurred."
msgstr "このメソッドを呼ばないと、[`end_document`][html-sax-parser-end-document]イベントは発生しません。"

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってHTMLをパースする。\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid ""
"parser:finish()\n"
"```"
msgstr ""

msgid "## Property"
msgstr "## プロパティ"

msgid "### `start_document` {#start-document}"
msgstr ""

msgid "It registers user call back function as below."
msgstr "以下のようにコールバック関数を登録できます。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  -- 実行したいコード\n"
"end\n"
"```"

msgid "Registered function is called, when parse start document element."
msgstr "document要素のパースを開始したときに、登録した関数が呼び出されます。"

msgid "Registered function is called, when parse `<html>` in below example."
msgstr "以下の例だと、`<html>`をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  print(\"Start document\")\n"
"end\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""
"-- SAXを使ってHTMLをパースする。\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.start_document = function()\n"
"  print(\"Start document\")\n"
"end\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"

msgid "Result of avobe example as blow."
msgstr "上記の例の結果は以下のようになります。"

msgid ""
"```\n"
"Start document\n"
"```"
msgstr ""

msgid "### `end_document` {#end-document}"
msgstr ""

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.end_document = function()\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when call [`finish`][finish]."
msgstr "[`finish`][finish]が呼ばれたときに、登録したコールバック関数が呼び出されます。"

msgid "Registered function is called, when parse `parser:finish()` in below example."
msgstr "以下の例では、`parser:finish()`を実行したときに登録した関数が呼び出されます。"

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.end_document = function()\n"
"  print(\"End document\")\n"
"end\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid ""
"```\n"
"End document\n"
"```"
msgstr ""

msgid "### `processing_instruction` {#processing-instruction}"
msgstr ""

msgid ""
"You can get attributes of processing instruction as argument of your call back"
". Attributes of processing instruction are `target` and `data_list` in below e"
"xsample."
msgstr ""
"コールバック関数の引数として、Processing instruction要素の属性を取得することができます。Processing Instruction要"
"素の属性は、以下の例では、`target`と`data_list`です。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.processing_instruction = function(target, data_list)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse processing instruction element."
msgstr "Processing Instruction要素が解析されたときに、登録したコールバック関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<?target This is PI>` in below exam"
"ple."
msgstr "以下の例では、`<?target This is PI>`をパースした際に登録した関数が呼び出されます。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<html>\n"
"  <?target This is PI>\n"
"  <body>\n"
"    <p>Hello</p>\n"
"  </body>\n"
"</html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.processing_instruction = function(target, data_list)\n"
"  print(\"Processing instruction target: \"..target)\n"
"  print(\"Processing instruction data: \"..data_list)\n"
"end\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Processing instruction target: target\n"
"Processing instruction data: This is PI\n"
"```"
msgstr ""

msgid "### `cdata_block` {#cdata-block}"
msgstr ""

msgid ""
"You can get attributes of script element as argument of your call back. Attrib"
"utes of script element is `cdata_block`."
msgstr "コールバック関数の引数として、`script`要素の属性を取得できます。以下の例では、`script`要素の属性は、`cdata_block`です。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.cdata_block = function(cdata_block)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse script element."
msgstr "script要素をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"Registered function is called, when parse `<script>alert(\\\"Hello world!\\\")</sc"
"ript>` in below example."
msgstr "以下の例では、`<script>alert(\\\"Hello world!\\\")</script>`をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<html>\n"
"  <body>\n"
"    <p>Hello</p>\n"
"  </body>\n"
"  <script>alert(\\\"Hello world!\\\")</script>\n"
"</html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.cdata_block = function(cdata_block)\n"
"  print(\"CDATA block: \"..cdata_block)\n"
"end\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid ""
"```\n"
"CDATA block: alert(\\\"Hello world!\\\")\n"
"```"
msgstr ""

msgid "### `ignorable_whitespace` {#ignorable-whitespace}"
msgstr ""

msgid ""
"You can get ignorable whitespace in HTML as argument of your call back. ignora"
"ble whitespace in HTML is `ignorable_whitespace` in below example."
msgstr ""
"コールバック関数の引数として、HTML内の無視できる空白を取得することができます。以下の例では、無視できる空白は、`ignorable_whitespace"
"`です。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.ignorable_whitespace = function(ignorable_whitespace)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse ignorable whitespace"
msgstr "無視できる空白をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<html> <body><p>Hello</p></body> </html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.ignorable_whitespace = function(ignorable_whitespace)\n"
"  print(\"Ignorable whitespace: \"..\"\\\"\"..ignorable_whitespace..\"\\\"\")\n"
"end\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Ignorable whitespace: \" \"\n"
"Ignorable whitespace: \" \"\n"
"Ignorable whitespace: \"\n"
"\"\n"
"```"
msgstr ""

msgid "### `comment` {#comment}"
msgstr ""

msgid ""
"You can get comment of HTML as argument of your call back. comment in HTML is "
"`comment` in below example."
msgstr "コールバック関数の引数として、HTML内のコメントを取得できます。以下の例では、`comment`がHTML内のコメントです。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.comment = function(comment)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse HTML's comment."
msgstr "HTMLのコメントをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<html>\n"
"<!--This is comment.-->\n"
"  <body>\n"
"    <p>Hello</p>\n"
"  </body>\n"
"</html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.comment = function(comment)\n"
"  print(\"Comment: \"..comment)\n"
"end\n"
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Comment:  This is comment.\n"
"```"
msgstr ""

msgid "### `start_element` {#start-element}"
msgstr ""

msgid "You can get name and attributes of elements as argument of your call back."
msgstr "コールバック関数の引数として、要素の名前と属性を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.start_element = function(local_name, attributes)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse element."
msgstr "要素をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<html id=\"top\" class=\"top-level\">\n"
"  <body>\n"
"    <p>Hello</p>\n"
"  </body>\n"
"</html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.start_element = function(local_name, attributes)\n"
"  print(\"Start element: \" .. local_name)\n"
"  if #attributes > 0 then\n"
"    print(\"  Attributes:\")\n"
"    for i, attribute in pairs(attributes) do\n"
"      local name\n"
"      if attribute.prefix then\n"
"        name = attribute.prefix .. \":\" .. attribute.local_name\n"
"      else\n"
"        name = attribute.name\n"
"      end\n"
"      if attribute.uri then\n"
"        name = name .. \"{\" .. attribute.uri .. \"}\"\n"
"      end\n"
"      print(\"    \" .. name .. \": \" .. attribute.value)\n"
"    end\n"
"  end\n"
"end"
msgstr ""

msgid ""
"local success = parser:parse(html)\n"
"if not success then\n"
"  print(\"Failed to parse HTML with SAX\")\n"
"  os.exit(1)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Start element: html\n"
"  Attributes:\n"
"    id: top\n"
"    class: top-level\n"
"Start element: body\n"
"Start element: p\n"
"```"
msgstr ""

msgid "### `end_element` {#end-element}"
msgstr ""

msgid "You can get name of elements as argument of your call back."
msgstr "コールバック関数の引数として、要素の名前を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.end_element = function(name)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse end element."
msgstr "要素の終わりをパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.end_element = function(name)\n"
"  print(\"End element: \" .. name)\n"
"end"
msgstr ""

msgid ""
"```\n"
"End element: p\n"
"End element: body\n"
"End element: html\n"
"```"
msgstr ""

msgid "### `text` {#text}"
msgstr ""

msgid "You can get text of text element as argument of your call back."
msgstr "コールバック関数の引数として、`text`要素の値を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.text = function(text)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid "Registered function is called, when parse text element."
msgstr "`text`要素をパースしたときに、登録した関数が呼び出されます。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<html><body><p>Hello</p></body></html>\n"
"]]"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.text = function(text)\n"
"  print(\"Text: \" .. text)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Text: Hello\n"
"```"
msgstr ""

msgid "### `error` {#error}"
msgstr ""

msgid ""
"You can get error information of parse HTML with SAX as argument of your call "
"back."
msgstr "コールバック関数の引数として、エラー情報を取得できます。"

msgid ""
"```lua\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.error = function(error)\n"
"  -- You want to execute code\n"
"end\n"
"```"
msgstr ""

msgid ""
"Registered function is called, when parse failed.\n"
"Error information structure as below."
msgstr "パースが失敗したときに、登録した関数が呼び出されます。エラー情報の構造は以下の通りです。"

msgid ""
"```\n"
"{\n"
"  domain\n"
"  code\n"
"  message\n"
"  level\n"
"  line\n"
"}\n"
"```"
msgstr ""

msgid ""
"`domain` has values as specific as below.\n"
"[`Error domain list`][error-domain-list]"
msgstr "`domain`の値は、[`Error domain 一覧`][error-domain-list]に定義されています。"

msgid ""
"`code` has values as specific as below.\n"
"[`Error code list`][error-code-list]"
msgstr "`code`の値は、[`Error code 一覧`][error-code-list]に定義されています。"

msgid ""
"`level` has values as specific as below.\n"
"[`Error level list`][error-level-list]"
msgstr "`level`の値は、[`Error level 一覧`][error-level-list]に定義されています。"

msgid ""
"-- HTML to be parsed\n"
"local html = [[\n"
"<>\n"
"]]"
msgstr ""

msgid ""
"-- Parses HTML with SAX\n"
"local parser = xmlua.HTMLSAXParser.new()\n"
"parser.error = function(error)\n"
"  print(\"Error domain : \" .. error.domain)\n"
"  print(\"Error code   : \" .. error.code)\n"
"  print(\"Error message: \" .. error.message)\n"
"  print(\"Error level  : \" .. error.level)\n"
"  print(\"Error line   : \" .. error.line)\n"
"end"
msgstr ""

msgid ""
"```\n"
"Error domain : 5\n"
"Error code   : 68\n"
"Error message: htmlParseStartTag: invalid element name"
msgstr ""

msgid ""
"Error level  : 2\n"
"Error line   : 1\n"
"Failed to parse HTML with SAX\n"
"```"
msgstr ""

msgid ""
"[html-sax-parser-start-document]:#start-document\n"
"[html-sax-parser-end-document]:#end-document\n"
"[html-sax-parser-processing-instruction]:#processing-instruction\n"
"[html-sax-parser-cdata-block]:#cdata-block\n"
"[html-sax-parser-ignorable-whitespace]:#ignorable-whitespace\n"
"[html-sax-parser-comment]:#comment\n"
"[html-sax-parser-start-element]:#start-element\n"
"[html-sax-parser-end-element]:#end-element\n"
"[html-sax-parser-text]:#text\n"
"[html-sax-parser-error]:#error"
msgstr ""

msgid ""
"[parse]:#parse\n"
"[finish]:#finish"
msgstr ""

msgid ""
"[error-domain-list]:error-domain-list.html\n"
"[error-code-list]:error-code-list.html\n"
"[error-level-list]:error-level-list.html"
msgstr ""
