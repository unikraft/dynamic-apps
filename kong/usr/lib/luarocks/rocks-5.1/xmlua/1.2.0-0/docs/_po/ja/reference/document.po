msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

msgid ""
"---\n"
"title: xmlua.Document\n"
"---"
msgstr ""

msgid "# `xmlua.Document` class"
msgstr "# `xmlua.Document`クラス"

msgid "## Summary"
msgstr "## 概要"

msgid "It's a class for a document. Document is HTML document or XML document."
msgstr "ドキュメント用のクラスです。ドキュメントはHTMLドキュメントかXMLドキュメントのどちらかです。"

msgid "It has methods of the following modules:"
msgstr "このクラスのオブジェクトは以下のモジュールのメソッドを使えます。"

msgid ""
"  * [`xmlua.Serializable`][serializable]: Provides HTML and XML serialization "
"related methods."
msgstr "  * [`xmlua.Serializable`][serializable]: HTML・XMLへのシリアライズ関連のメソッドを提供します。"

msgid "  * [`xmlua.Searchable`][searchable]: Provides node search related methods."
msgstr "  * [`xmlua.Searchable`][searchable]: ノード検索関連のメソッドを提供します。"

msgid "It means that you can use methods in the modules."
msgstr "つまり、このクラスのオブジェクトで上述のモジュールのメソッドを使えます。"

msgid "## Properties"
msgstr "## プロパティー"

msgid "### `errors -> {ERROR1, ERROR2, ...}` {#errors}"
msgstr ""

msgid "It contains errors occurred while parsing document."
msgstr "ドキュメントをパースしているときに発生したエラーをすべて記録しています。"

msgid "Each error has the following structure:"
msgstr "各エラーは以下の構造になっています。"

msgid ""
"```lua\n"
"{\n"
"  domain = ERROR_DOMAIN_AS_NUMBER,\n"
"  code = ERROR_CODE_AS_NUMBER,\n"
"  message = \"ERROR_MESSAGE\",\n"
"  level = ERROR_LEVEL_AS_NUMBER,\n"
"  file = nil,\n"
"  line = ERROR_LINE_AS_NUMBER,\n"
"}\n"
"```"
msgstr ""

msgid ""
"`domain` and `code` use internal libxml2's error domain (`xmlErrorDomain`) and"
" error code (`xmlParserError`) directly for now. So you can't use them."
msgstr ""
"今のところ、`domain`と`code`は内部で使用しているlibxml2のエラードメイン（`xmlErrorDomain`）とエラーコード（`xmlPa"
"rserError`）を直接使用しています。そのためこれらを活用することはできません。"

msgid "`message` is the error message. It's the most important information."
msgstr "`message`はエラーメッセージです。これがもっとも重要な情報です。"

msgid ""
"`level` also uses internal libxml2's error level (`xmlErrorLevel`) but there a"
"re few levels. So you can use it. Here are all error levels:"
msgstr ""
"`level`も内部で使用しているlibxml2のエラーレベル（`xmlErrorLevel`）をそのまま使っています。しかし、エラーレベルは少ししかないの"
"でこの値を活用できます。以下がすべてのエラーレベルです。"

msgid "  * `1` (`XML_ERR_WARNING`): A warning."
msgstr "  * `1` (`XML_ERR_WARNING`)：警告。"

msgid "  * `2` (`XML_ERR_ERROR`): A recoverable error."
msgstr "  * `2` (`XML_ERR_ERROR`)：復旧可能なエラー。"

msgid "  * `3` (`XML_ERR_FATAL`): A fatal error."
msgstr "  * `3` (`XML_ERR_FATAL`)：復旧不可能なエラー。"

msgid ""
"`file` is always `nil` for now. Because XMLua only supports parsing HTML and X"
"ML in memory."
msgstr "今のところ、`file`は常に`nil`です。なぜなら、XMLuaはメモリー上のHTML・XMLのパースしかサポートしていないからです。"

msgid "`line` is the nth line where the error is occurred."
msgstr "`line`はこのエラーが発生した行番号です。"

msgid "## Methods"
msgstr "## メソッド"

msgid "### `root() -> xmlua.Element` {#root}"
msgstr ""

msgid "It returns the root element."
msgstr "ルート要素を返します。"

msgid "Example:"
msgstr "例："

msgid ""
"```lua\n"
"require xmlua = require(\"xmlua\")"
msgstr ""

msgid ""
"local xml = xmlua.XML.parse(\"<root><sub/></root>\")\n"
"xml:root() -- -> \"<root>\" element as xmlua.Element object\n"
"```"
msgstr ""
"local xml = xmlua.XML.parse(\"<root><sub/></root>\")\n"
"xml:root() -- -> xmlua.Elementオブジェクトな\"<root>\"要素\n"
"```"

msgid "### `parent() -> nil` {#parent}"
msgstr ""

msgid ""
"It always returns `nil`. It's just for consistency with [`xmlua.Element:parent"
"`][element-parent]."
msgstr "常に`nil`を返します。[`xmlua.Element:parent`][element-parent]との一貫性のためにあります。"

msgid ""
"local document = xmlua.XML.parse(\"<root><sub/></root>\")\n"
"document:parent() -- -> nil\n"
"```"
msgstr ""

msgid ""
"### `add_entity(entity) -> {name, original, content, entity_type, external_id,"
" system_id, uri, owner, checked}` {#add_entity}"
msgstr ""

msgid ""
"It returns the entity added to a document.\n"
"Argument of `add_entity` is Lua's table as below.\n"
"You can specify the name and the entity_type, the external_id, the system_id, "
"content of an entity you want to add."
msgstr ""
"ドキュメントに追加したエンティティを返します。`add_entity`の引数は以下のようなLuaのテーブルです。名前、エンティティタイプ、公開識別子、外部フ"
"ァイル名、エンティティの内容を指定できます。"

msgid ""
"```lua\n"
"local entity_info = {\n"
"  name = \"Sample\",\n"
"  entity_type = \"INTERNAL_ENTITY\",\n"
"  external_id = \"-//W3C//DTD XHTML 1.0 Transitional//EN\",\n"
"  system_id = \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\",\n"
"  content = \"This is test.\"\n"
"}\n"
"```"
msgstr ""

msgid ""
"You can register an entity before XML parsing as the below example.\n"
"Thereby you can replace the existing reference entity."
msgstr "以下の例のように、XML解析前にエンティティを登録することができます。これにより、既にあるエンティティを置き換える事ができます。"

msgid ""
"```lua\n"
"local xmlua = require(\"xmlua\")"
msgstr ""

msgid ""
"-- XML to be parsed\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE root [\n"
"]>\n"
"<root>\n"
"  &Sample;\n"
"<root/>\n"
"]]"
msgstr ""
"-- パースするXML\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE root [\n"
"]>\n"
"<root>\n"
"  &Sample;\n"
"<root/>\n"
"]]"

msgid ""
"-- If you want to parse text in a file,\n"
"-- you need to read file content by yourself."
msgstr ""
"-- ファイル内のテキストをパースしたい場合は\n"
"-- 自分でファイルの内容を読み込む必要があります。"

msgid "-- local html = io.open(\"example.html\"):read(\"*all\")"
msgstr ""

msgid ""
"local parser = xmlua.XMLSAXParser.new()\n"
"local is_root = true\n"
"parser.start_element = function()\n"
"  if not is_root then\n"
"    return\n"
"  end"
msgstr ""

msgid ""
"  local document = parser.document\n"
"  -- Setting information for add a entity\n"
"  local entity = {\n"
"    name = \"Sample\",\n"
"    -- Entity type list\n"
"    --   INTERNAL_ENTITY\n"
"    --   EXTERNAL_PARSED_ENTITY\n"
"    --   EXTERNAL_UNPARSED_ENTITY\n"
"    --   INTERNAL_PARAMETER_ENTITY\n"
"    --   EXTERNAL_PARAMETER_ENTITY\n"
"    --   INTERNAL_PREDEFINED_ENTITY\n"
"    entity_type = \"INTERNAL_ENTITY\",\n"
"    content = \"This is test.\"\n"
"  }\n"
"  document:add_entity(entity)\n"
"  is_root = false\n"
"end\n"
"parser.text = function(text)\n"
"  print(text) -- This is test.\n"
"end"
msgstr ""

msgid ""
"parser:parse(xml)\n"
"parser:finish()\n"
"```"
msgstr ""

msgid "Result of avobe example as blow."
msgstr "上記の例の結果は以下のようになります。"

msgid ""
"```\n"
"This is test.\n"
"```"
msgstr ""

msgid ""
"### `add_dtd_entity(entity) -> {name, original, content, entity_type, external"
"_id, system_id, uri, owner, checked}` {#add_dtd_entity}"
msgstr ""

msgid ""
"It returns the entity added to a external subset of document.\n"
"Argument of `add_dtd_entity` is Lua's table as below.\n"
"You can specify the name and the entity_type, the external_id, the system_id, "
"content of an entity you want to add."
msgstr ""
"ドキュメントの外部サブセットに追加したエンティティを返します。`add_dtd_entity`の引数は以下のようなLuaのテーブルです。名前、エンティティタ"
"イプ、公開識別子、外部ファイル名、エンティティの内容を指定できます。"

msgid ""
"```lua\n"
"local xml = [[\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
"<!DOCTYPE root SYSTEM \"./sample/sample.dtd\">\n"
"<root>\n"
"  &Sample;\n"
"</root>\n"
"]]\n"
"```"
msgstr ""

msgid ""
"You can register an entity before XML parsing as the below example.\n"
"Thereby you can replace the existing reference entity, add reference.\n"
"Also, you need to setting option of `XMLSAXParser` as below, to you register a"
"n entity to external subset."
msgstr ""
"以下の例のように、XML解析前にエンティティを登録することができます。これにより、既にあるエンティティを置き換える事やエンティティを追加することができます。"
"また、外部サブセットへエンティティを登録するためには、以下のように`XMLSAXParser`にオプションを指定する必要があります。"

msgid ""
"```lua\n"
"local options = {load_dtd = true}\n"
"local parser = xmlua.XMLSAXParser.new(options)\n"
"```"
msgstr ""

msgid ""
"local options = {load_dtd = true}\n"
"local parser = xmlua.XMLSAXParser.new(options)\n"
"local is_root = true\n"
"parser.start_element = function()\n"
"  if not is_root then\n"
"    return\n"
"  end"
msgstr ""

msgid ""
"  local document = parser.document\n"
"  -- Setting information for add entity\n"
"  local entity = {\n"
"    name = \"Sample\",\n"
"    -- Entity type list\n"
"    --   INTERNAL_ENTITY\n"
"    --   EXTERNAL_PARSED_ENTITY\n"
"    --   EXTERNAL_UNPARSED_ENTITY\n"
"    --   INTERNAL_PARAMETER_ENTITY\n"
"    --   EXTERNAL_PARAMETER_ENTITY\n"
"    --   INTERNAL_PREDEFINED_ENTITY\n"
"    entity_type = \"INTERNAL_ENTITY\",\n"
"    content = \"This is test.\"\n"
"  }\n"
"  document:add_dtd_entity(entity)\n"
"  is_root = false\n"
"end\n"
"parser.text = function(text)\n"
"  print(text) -- This is test.\n"
"end\n"
"parser:parse(xml)\n"
"parser:finish()\n"
"```"
msgstr ""

msgid ""
"### `create_cdata_section(content) -> [xmlua.CDATADection]` {#create_cdata_sec"
"tion}"
msgstr ""

msgid ""
"You can create new cdata section node.\n"
"the argument is content of cdata section node."
msgstr "新しいcdataセクションノードを作成することができます。引数はcdataセクションノードの内容です。"

msgid ""
"local document = xmlua.XML.build({\"root\"})\n"
"local cdata_section_node =\n"
"  document:create_cdata_section(\"This is <CDATA>\")\n"
"root = document:root()\n"
"root:add_child(cdata_section_node)\n"
"print(document:to_xml())\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<root><![CDATA[This is <CDATA>]]></root>\n"
"end\n"
"```"
msgstr ""

msgid "### `create_comment(content) -> [xmlua.Comment]` {#create_comment}"
msgstr ""

msgid ""
"You can create new comment node.\n"
"the argument is content of comment node."
msgstr "新しいコメントノードを作成することができます。引数はコメントノードの内容です。"

msgid ""
"local document = xmlua.XML.build({\"root\"})\n"
"local comment_node =\n"
"  document:create_comment(\"This is comment\")\n"
"root = document:root()\n"
"root:add_child(comment_node)\n"
"print(document:to_xml())\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<root>\n"
"--  <!--This is comment-->\n"
"--</root>\n"
"end\n"
"```"
msgstr ""

msgid ""
"### `create_document_fragment() -> [xmlua.DocumentFragment]` {#create_document"
"_fragment}"
msgstr ""

msgid "You can create new document fragment node."
msgstr "新しくドキュメントフラグメントノードを作成できます。"

msgid ""
"local document = xmlua.XML.build({\"root\"})\n"
"local document_fragment = document:create_document_fragment()\n"
"local comment_node =\n"
"  document:create_comment(\"This is comment\")\n"
"document_fragment:add_child(comment_node)"
msgstr ""

msgid ""
"root = document:root()\n"
"root:add_child(comment_node)\n"
"print(document:to_xml())\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<root>\n"
"--  <!--This is comment-->\n"
"--\n"
"--</root>\n"
"end\n"
"```"
msgstr ""

msgid ""
"### `create_document_type(name, public_id, system_id) -> [xmlua.DocumentType]`"
" {#create_document_type}"
msgstr ""

msgid ""
"You can create new document type node.\n"
"You can specify a location of the external subset by SystemID or PublicID.\n"
"If you want to specify a location of the exterrnal subset by PublicID, you set"
" `public_id` and `system_id`.\n"
"If you want to specify a location of the external subset by SystemID, you set "
"`system_id`(`public_id` is `nil`)."
msgstr ""
"新しいドキュメントタイプノードを作成できます。\n"
"外部サブセットの場所は、SystemIDまたはPublicIDで指定できます。PublicIDで外部サブセットの場所を指定する場合は、 `public_id"
"` と` system_id` を設定します。"

msgid ""
"--Specify a location by PublicID\n"
"local document = xmlua.XML.build({})\n"
"local document_type =\n"
"  document:create_document_type(\"TestDocumentDecl\",\n"
"                                \"-//Test/Sample/EN\",\n"
"                                \"//test.dtd\")\n"
"print(document:to_xml()\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<!DOCTYPE TestDocumentDecl PUBLIC \"-//Test/Sample/EN\" \"//system.dtd\">\n"
"```"
msgstr ""
"--PublicIDによる指定\n"
"local document = xmlua.XML.build({})\n"
"local document_type =\n"
"  document:create_document_type(\"TestDocumentDecl\",\n"
"                                \"-//Test/Sample/EN\",\n"
"                                \"//test.dtd\")\n"
"print(document:to_xml()\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<!DOCTYPE TestDocumentDecl PUBLIC \"-//Test/Sample/EN\" \"//system.dtd\">\n"
"```"

msgid ""
"--Specify a location by SystemID\n"
"local document = xmlua.XML.build({})\n"
"local document_type =\n"
"  document:create_document_type(\"TestDocumentDecl\",\n"
"                                nil,\n"
"                                \"//test.dtd\")\n"
"print(document:to_xml()\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<!DOCTYPE TestDocumentDecl SYSTEM \"//system.dtd\">\n"
"```"
msgstr ""
"--SystemIDによる指定\n"
"local document = xmlua.XML.build({})\n"
"local document_type =\n"
"  document:create_document_type(\"TestDocumentDecl\",\n"
"                                nil,\n"
"                                \"//test.dtd\")\n"
"print(document:to_xml()\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<!DOCTYPE TestDocumentDecl SYSTEM \"//system.dtd\">\n"
"```"

msgid "### `create_namespace(href, prefix) -> [xmlua.Namespace]` {#create_namespace}"
msgstr ""

msgid ""
"You can create new namespace node.\n"
"This method can't create a namespace with a similar prefix than an existing on"
"e present on this node.\n"
"If you want to create default namespace, you set `nil` to `prefix`."
msgstr ""
"新しく名前空間ノードを作成できます。このメソッドは、このノードに存在する既存の接頭辞と同じ接頭辞を持つ名前空間を作成することはできません。デフォルトの名前空"
"間を作成する場合は、 `nil`を` prefix`に設定します。"

msgid ""
"```lua\n"
"local xmlua = require(\"xmlua\")\n"
"--create new namespace\n"
"local document = xmlua.XML.build({\"root\"})\n"
"local namespace =\n"
"  document:create_namespace(\"http://www.w3.org/1999/xhtml\",\n"
"                            \"xhtml\")\n"
"local root = document:root()\n"
"root:set_namespace(namespace)\n"
"print(document:to_xml())\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<xhtml:root/>\n"
"```"
msgstr ""
"```lua\n"
"local xmlua = require(\"xmlua\")\n"
"--新しい名前空間の作成\n"
"local document = xmlua.XML.build({\"root\"})\n"
"local namespace =\n"
"  document:create_namespace(\"http://www.w3.org/1999/xhtml\",\n"
"                            \"xhtml\")\n"
"local root = document:root()\n"
"root:set_namespace(namespace)\n"
"print(document:to_xml())\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<xhtml:root/>\n"
"```"

msgid ""
"```lua\n"
"local xmlua = require(\"xmlua\")\n"
"--create default namespace\n"
"local document = xmlua.XML.build({\"root\"})\n"
"local namespace =\n"
"  document:create_namespace(\"http://www.w3.org/1999/xhtml\",\n"
"                            nil)\n"
"local root = document:root()\n"
"root:set_namespace(namespace)\n"
"print(document:to_xml())\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<root/>\n"
"```"
msgstr ""
"```lua\n"
"local xmlua = require(\"xmlua\")\n"
"--デフォルト名前空間の作成\n"
"local document = xmlua.XML.build({\"root\"})\n"
"local namespace =\n"
"  document:create_namespace(\"http://www.w3.org/1999/xhtml\",\n"
"                            nil)\n"
"local root = document:root()\n"
"root:set_namespace(namespace)\n"
"print(document:to_xml())\n"
"--<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<root/>\n"
"```"

msgid ""
"### `create_processing_instruction(name, content) -> [xmlua.ProcessingInstruct"
"ion]` {#create_processing_instruction}"
msgstr ""

msgid ""
"You can create new processing instruction node.\n"
"You can spesify processing instruction as `name` and argument of processing in"
"struction as `content`."
msgstr "新しく処理命令ノードを作成できます。処理命令を `name`、処理命令の引数を` content`として指定することができます。"

msgid ""
"local document = xmlua.XML.build({\"root\"})\n"
"local processing_instruction =\n"
"  document:create_processing_instruction(\"xml-stylesheet\",\n"
"                                         \"href=\\\"www.test.com/test-style.xsl\\\""
" type=\\\"text/xsl\\\"\")\n"
"local root = document:root()\n"
"root:add_child(processing_instruction)\n"
"print(document:to_xml())\n"
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"--<root>\n"
"--  <?xml-stylesheet href=\"www.test.com/test-style.xsl\" type=\"text/xsl\"?>\n"
"--</root>\n"
"```"
msgstr ""

msgid "## See also"
msgstr "## 参照"

msgid "  * [`xmlua.HTML`][html]: The class for parsing HTML."
msgstr "  * [`xmlua.HTML`][html]: HTMLをパースするクラスです。"

msgid "  * [`xmlua.XML`][xml]: The class for parsing XML."
msgstr "  * [`xmlua.XML`][xml]: XMLをパースするクラスです。"

msgid "  * [`xmlua.Element`][element]: The class for element node."
msgstr "  * [`xmlua.Element`][element]: 要素ノード用のクラスです。"

msgid "[element-parent]:element.html#parent"
msgstr ""

msgid "[html]:html.html"
msgstr ""

msgid "[xml]:xml.html"
msgstr ""

msgid "[element]:element.html"
msgstr ""

msgid "[serializable]:serializable.html"
msgstr ""

msgid "[searchable]:searchable.html"
msgstr ""
