/*
  This software is copyright Kong Inc. and its licensors.
  Use of the software is subject to the agreement between your organization
  and Kong Inc. If there is no such agreement, use is governed by and
  subject to the terms of the Kong Master Software License Agreement found
  at https://konghq.com/enterprisesoftwarelicense/.
*/

import{_ as G,W as X,H as Y,z as _,J as Z,u as ee,Q as se,g as te,I as f,a3 as ae,a8 as g,r as o,c as p,b as c,w as m,l as k,h as w,o as l,a as n,t as y,V as ie,K as re,L as oe,R as ne,U as le,d as R,__tla as de}from"./index.84d84090.3_3_0_0.js";import{B as ce,__tla as me}from"./BadgeLink.239f1815.3_3_0_0.js";import{E as he,__tla as pe}from"./EntityForm.c5492e4f.3_3_0_0.js";import{F as ue,__tla as ke}from"./FormPage.4b74a91a.3_3_0_0.js";import{R as we,__tla as be}from"./RolesModal.41a9acab.3_3_0_0.js";import{E as _e,__tla as Re}from"./EntityMixin.2764673d.3_3_0_0.js";import{__tla as fe}from"./monaco-editor.90904fcf.3_3_0_0.js";import{__tla as ge}from"./ConfirmModalDialog.af276128.3_3_0_0.js";import{__tla as ye}from"./EntityDeleteModal.673d985c.3_3_0_0.js";import"./RedirectMixin.efeb36f2.3_3_0_0.js";import{__tla as Ee}from"./MultiChecklist.d117c9be.3_3_0_0.js";import{__tla as We}from"./EntityButton.1838e0e9.3_3_0_0.js";import{__tla as $e}from"./EntityFilter.bf4158bc.3_3_0_0.js";let E,Ae=Promise.all([(()=>{try{return de}catch{}})(),(()=>{try{return me}catch{}})(),(()=>{try{return pe}catch{}})(),(()=>{try{return ke}catch{}})(),(()=>{try{return be}catch{}})(),(()=>{try{return Re}catch{}})(),(()=>{try{return fe}catch{}})(),(()=>{try{return ge}catch{}})(),(()=>{try{return ye}catch{}})(),(()=>{try{return Ee}catch{}})(),(()=>{try{return We}catch{}})(),(()=>{try{return $e}catch{}})()]).then(async()=>{const W={email:{type:"input",inputType:"email",required:!0},username:{type:"input",inputType:"text",required:!0},custom_id:{type:"input",inputType:"text"},rbac_token_enabled:{type:"checkbox",default:!0,label:"Enable RBAC Token",help:"Allows this admin to use and reset their RBAC token"}},$={name:"AdminForm",components:{BadgeLink:ce,EntityForm:he,WorkspaceTitle:X,PageHeader:Y,RolesModal:we},mixins:[ue,_e],data(){return{schema:W,resourceEndpoint:"admins",isModalVisible:!1,admin:null,error:null,allRoles:[],adminRoles:[],adminWorkspaces:null,workspaceRoles:[],changes:{},enableSubmit:!1}},computed:{..._(Z,["workspaces","getWorkspaceMeta"]),..._(ee,{currentUser:"currentUser",perms:"permissions"}),..._(se,{docsLink:"docsEnterprise"}),id(){return this.$route.params.id},workspace(){return this.$route.params.workspace},isEditing(){return!!this.id},buttonStates(){return{idle:this.isEditing?"Update Admin":"Invite Admin",submitting:this.isEditing?"Updating...":"Submitting...",deleting:"Deleting..."}},isAdmin(){return this.currentUser?this.id===this.currentUser.id:!1},tableData(){return{headers:[{label:"Workspace",key:"workspace"},{label:"Roles",key:"roles"}],data:this.workspaceRoles.length&&Object.values(this.workspaceRoles).map(e=>({workspace:e.workspace,roles:e.roles})).filter(e=>e.roles.length>0)}},breadcrumbItems(){const e=[{key:"teams-overview",to:{path:"/teams",hash:"#admins"},title:"Team Admins",text:"Teams"}];return this.isEditing&&e.push({key:"view-user",to:{name:"view-user"},title:`View ${this.admin&&this.admin.username||this.id}`,text:this.admin&&this.admin.username||this.id}),e},isShowBelongWorkspace(){return!this.isEditing&&(!this.tableData.data||!this.tableData.data.length)},belongWorkspaces(){return this.allowedWorkspaces.map(e=>({label:e.name,value:e.name,selected:this.workspace===e.name}))},allowedWorkspaces(){return this.workspaces.reduce((e,s)=>(s.name==="*"||this.$rbac.isAllowed(this.perms,[{path:"/admins",actions:["create"]}],s.name)&&e.push(s),e),[])},permissions(){return{roles:{read:this.allowedWorkspaces.some(e=>this.$rbac.isAllowed(this.perms,[{path:"/rbac/roles",actions:["read"]}],e.name))},admins:{update:this.$rbac.isAllowed(this.perms,[{path:"/admins/*",actions:["update"]}],this.workspace),delete:this.$rbac.isAllowed(this.perms,[{path:"/admins/*",actions:["delete"]}],this.workspace)},adminsRoles:{read:this.$rbac.isAllowed(this.perms,[{path:"/admins/*/roles",actions:["read"]}],this.workspace),update:this.allowedWorkspaces.some(e=>this.$rbac.isAllowed(this.perms,[{path:"/admins/*/roles",actions:["update"]}],e.name))}}}},methods:{onFormCancel(){this.$router.go(-1)},selectedWorkspace(e){this.$router.replace({path:`/teams/${e.label}/invite`})},fetch(){return this.getAdmin().then(e=>this.permissions.roles.read&&this.fetchRoleEndpoints(e.id)).then(e=>(e&&this.mapRolesData(e),{data:this.admin})).catch(e=>{this.error=te(e)})},async fetchRoleEndpoints(e){const s=this.permissions.roles.read&&await this.fetchAllRoles(),t=this.permissions.adminsRoles.read&&await this.getAdminRoles(e);return{allRoles:s,adminRoles:t}},async getAdmin(){const e=await this.$api.query(`${this.workspace}/admins/${this.id}/workspaces`).then(i=>i.data),s=await this.$api.query(`${this.workspace}/admins/${this.id}`).then(i=>i.data),t=e.some(i=>i.name==="*");return this.adminWorkspaces=t?this.allowedWorkspaces:e.filter(i=>i.name!=="*"),this.admin=s,s},async fetchAllRoles(){return(await Promise.all(this.allowedWorkspaces.map(async e=>{const s=await this.$api.getAllRoles(e.name).then(t=>t.data);return{workspace:e.name,roles:s.sort(f("name"))}}))).sort(f("workspace"))},async getAdminRoles(e){return(await Promise.all(this.adminWorkspaces.map(async s=>{if(this.$rbac.isAllowed(this.perms,[{path:"/admins/*/roles",actions:["update"]}],s.name)){const t=await this.$api.query(`${s.name}/admins/${e}/roles`).then(i=>i.data);return{workspace:s.name,roles:t.roles.map(i=>i.name)}}}))).filter(Boolean).reduce((s,t)=>(s[t.workspace]=t.roles,s),{})},mapRolesData({allRoles:e,adminRoles:s}){this.allRoles=e,this.adminRoles=s,this.workSpaceRoles=[],Object.keys(this.adminRoles).forEach(t=>{const i=[],r=this.allRoles.find(a=>a.workspace===t).roles;this.adminRoles[t].forEach(a=>{const d=r.find(b=>b.name===a);i.push(d)}),this.workspaceRoles.push({workspace:t,roles:i})})},saveAdminRoles(e){this.isModalVisible=!1;const s=Object.keys(e);this.isEditing&&s.forEach(t=>{const i=e[t];this.changes[t]||(this.changes[t]={}),Object.assign(this.changes[t],i.added&&{added:i.added},i.deleted&&{deleted:i.deleted})});for(let t=0;t<s.length;t++){const i=this.workspaceRoles.find(r=>r.workspace===s[t]);if(i){const r=e[s[t]].added;for(let a=0;a<r.length;a++)i.roles.find(d=>d.name===r[a].name)||i.roles.push(r[a])}else this.workspaceRoles.push({workspace:s[t],roles:e[s[t]].added});if(e[s[t]].deleted.length&&i){const r=new Set(e[s[t]].deleted.map(d=>d.id)),a=i.roles.filter(d=>!r.has(d.id));i.roles=a}}this.enableSubmit=!0},adminFormSubmit(e){return this.onFormSubmit(e,null).then(s=>s.data.admin?s.data.admin:s.data).then(s=>this.admin=s).then(()=>this.submitRoles(this.admin.id)).then(this.handleSuccess)},submitRoles(e){const s=[];if(this.isEditing){if(!ae(this.changes))for(const t in this.changes){const i=this.changes[t];i.added.length>0&&(s[0]=this.$api.createRecordWithWorkspace(t,`admins/${e}/roles`,{roles:i.added.map(r=>r.name).join(",")})),i.deleted.length>0&&(s[0]=this.$api.deleteRecordWithWorkspaceAndBody(t,`admins/${e}/roles`,{roles:i.deleted.map(r=>r.name).join(",")}))}}else for(let t=0;t<this.workspaceRoles.length;t++){const i=this.workspaces.find(r=>r.name===this.workspaceRoles[t].workspace).name;s[t]=this.$api.createRecordWithWorkspace(i,`admins/${e}/roles`,{roles:this.workspaceRoles[t].roles.map(r=>r.name).join(",")})}return Promise.all(s)},async onFormSubmit(e){const s=this.workspaceRoles.length>0?this.workspaceRoles[0].workspace:this.workspace;return this.isEditing?this.updateRecord(e,s):(g.trackEvent(g.EVENTS.USER_INVITED),this.createRecord(e,s))},createRecord(e,s){return this.$api.createRecordWithWorkspace(s,this.resourceEndpoint,e)},updateRecord(e,s){return this.$api.updateRecordWithWorkspace(s,this.resourceEndpoint,this.id,e)},handleDelete(){const e=this.workspaceRoles.length>0?this.workspaceRoles[0].workspace:this.adminWorkspaces[0].name;return this.$api.deleteRecordWithWorkspace(e,"admins",this.id).then(this.handleSuccess)},handleSuccess(){this.$router.push({path:"/teams",hash:"#admins",query:{workspace:this.workspace}})}}},A={class:"admin-form form-container"},v=R(" Learn more "),S={key:0,class:"form-error"},x={class:"mb-0"},B={class:"d-flex justify-content-between align-items-center"},D=n("div",null,[n("label",{class:"mb-0"},"Roles")],-1),F=R(" Add/Edit Roles "),T=n("p",{class:"hint mt-4 mb-0"}," Select the roles per workspace for this Admin, this can be changed later. ",-1),M={key:0,class:"roles-table pb-4"},V={key:1,class:"my-4"},j={key:2,class:"border-bottom pb-4 mb-4 pt-4 border-top"},C=n("div",{class:"d-flex justify-content-between align-items-center"},[n("div",null,[n("label",{class:"mb-0"},"Belong workspace")])],-1),L=n("p",{class:"hint mt-4 mb-0"}," Select the workspace for this Admin when hasn't select Roles, this can be changed later. ",-1);function U(e,s,t,i,r,a){const d=o("KBreadcrumbs"),b=o("KExternalLink"),K=o("PageHeader"),q=o("KEmptyState"),I=o("KButton"),P=o("WorkspaceTitle"),O=o("BadgeLink"),H=o("KTable"),N=o("RbacEmptyList"),z=o("KSelect"),J=o("EntityForm"),Q=o("RolesModal");return l(),p("section",A,[c(d,{items:a.breadcrumbItems},null,8,["items"]),c(K,null,{default:m(()=>[c(b,{href:e.docsLink.url+"kong-manager/auth/rbac/add-admin/"},{default:m(()=>[v]),_:1},8,["href"])]),_:1}),r.error!==null?(l(),p("div",S,[c(q,{"cta-is-hidden":"","is-error":""},{message:m(()=>[n("h5",x,y(r.error),1)]),_:1})])):(l(),k(J,{key:1,"on-load":a.id&&a.fetch,"is-editing":a.isEditing,"show-delete":a.isEditing&&!a.isAdmin&&a.permissions.admins.delete,"show-confirmation-dialog":!1,"enable-submit":r.enableSubmit,schema:r.schema,"button-text":a.buttonStates.idle,"on-submit":a.adminFormSubmit,"on-form-cancel":a.onFormCancel,"on-delete":a.handleDelete,"resource-endpoint":r.resourceEndpoint,"entity-workspace":a.allowedWorkspaces[0].name,"redirect-route-after-delete":{name:"teams-overview"},"entity-name":"Admin",entity:"admins"},{afterFormContainer:m(()=>[n("div",{class:ie([{"border-bottom pb-4":!a.tableData.data.length},"mb-4 pt-4 border-top roles-section"])},[n("div",B,[D,n("div",null,[a.permissions.adminsRoles.read&&a.permissions.adminsRoles.update&&a.permissions.roles.read?(l(),k(I,{key:0,class:"roles-btn",appearance:"outline",onClick:s[0]||(s[0]=h=>r.isModalVisible=!0)},{default:m(()=>[F]),_:1})):w("",!0)])]),T],2),a.permissions.adminsRoles.read&&a.permissions.adminsRoles.update&&a.permissions.roles.read?(l(),p("div",M,[c(H,{headers:a.tableData.headers,fetcher:()=>({data:a.tableData.data||[]}),"disable-pagination":!0,"empty-state-title":"No roles assigned"},{workspace:m(({row:h})=>[c(P,re(oe(e.getWorkspaceMeta(h.workspace))),null,16)]),roles:m(({row:h})=>[h.roles.length>0?(l(!0),p(ne,{key:0},le(h.roles,u=>(l(),k(O,{key:u&&u.name,tooltip:u.comment,link:{name:"teams-view-role",params:{id:u.id,workspace:h.workspace}}},{default:m(()=>[R(y(u.name),1)]),_:2},1032,["tooltip","link"]))),128)):w("",!0)]),_:1},8,["headers","fetcher"])])):(l(),p("div",V,[c(N)])),a.isShowBelongWorkspace?(l(),p("div",j,[C,L,c(z,{items:a.belongWorkspaces,appearance:"select","data-testid":"k-input-select",width:"300",onSelected:a.selectedWorkspace},null,8,["items","onSelected"])])):w("",!0)]),_:1},8,["on-load","is-editing","show-delete","enable-submit","schema","button-text","on-submit","on-form-cancel","on-delete","resource-endpoint","entity-workspace"])),a.permissions.roles.read&&r.isModalVisible?(l(),k(Q,{key:2,"is-visible":r.isModalVisible,workspace:a.workspace,"selected-roles":r.workspaceRoles,"modal-proceed-text":"Add/Edit Roles","multi-workspace":"",onConfirm:a.saveAdminRoles,onCancel:s[1]||(s[1]=h=>r.isModalVisible=!1)},null,8,["is-visible","workspace","selected-roles","onConfirm"])):w("",!0)])}E=G($,[["render",U]])});export{Ae as __tla,E as default};
