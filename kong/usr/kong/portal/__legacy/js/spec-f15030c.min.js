/*
  This software is copyright Kong Inc. and its licensors.
  Use of the software is subject to the agreement between your organization
  and Kong Inc. If there is no such agreement, use is governed by and
  subject to the terms of the Kong Master Software License Agreement found
  at https://konghq.com/enterprisesoftwarelicense/.
*/

webpackJsonp([1],{

/***/ 1276:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _SwaggerRenderer = __webpack_require__(1277);

var _SwaggerRenderer2 = _interopRequireDefault(_SwaggerRenderer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function initializeSpecRenderer() {
  if (window._kong.spec && window._kong.handlebarsRenderer) {
    _SwaggerRenderer2.default.render(window._kong.handlebarsRenderer, window._kong.spec);
  }
}

function fixSwaggerDeepLinks() {
  window.history.pushState = function (state, title, url) {
    window.location.hash = url.replace(/^#/, '#');
  };
}

window.registerApp(initializeSpecRenderer);
window.registerApp(fixSwaggerDeepLinks);

/***/ }),

/***/ 1277:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _classCallCheck2 = __webpack_require__(124);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(125);

var _createClass3 = _interopRequireDefault(_createClass2);

var _common = __webpack_require__(17);

var _spec = __webpack_require__(1278);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SwaggerRenderer = function () {
  function SwaggerRenderer() {
    (0, _classCallCheck3.default)(this, SwaggerRenderer);
  }

  (0, _createClass3.default)(SwaggerRenderer, null, [{
    key: 'render',
    value: function render(handlebarsRenderer, spec) {
      var specWrapper = document.getElementById('ui-wrapper');
      if (specWrapper === null) return;

      var specName = void 0;
      var specFile = void 0;
      if (spec) {
        specFile = spec;
      } else {
        specName = specWrapper.dataset.spec;
        specFile = handlebarsRenderer.specs.find(function (file) {
          return file.name === specName;
        }) || spec;
      }

      var parsedSpec = void 0;
      try {
        parsedSpec = (0, _spec.retrieveParsedSpec)(specName, specFile);
      } catch (error) {
        (0, _common.renderError)(specWrapper, error);
        return;
      }

      if (parsedSpec.tags) {
        parsedSpec.tags.sort(function (a, b) {
          return (0, _common.sortAlphabetical)(a.name, b.name);
        });
      }

      (0, _spec.registerSwaggerSpec)(parsedSpec);
    }
  }]);
  return SwaggerRenderer;
}();

exports.default = SwaggerRenderer;

/***/ }),

/***/ 1278:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = __webpack_require__(46);

var _extends3 = _interopRequireDefault(_extends2);

exports.registerSwaggerSpec = registerSwaggerSpec;
exports.retrieveParsedSpec = retrieveParsedSpec;
exports.parseSpec = parseSpec;

var _yamlJs = __webpack_require__(579);

var _yamlJs2 = _interopRequireDefault(_yamlJs);

var _swaggerUi = __webpack_require__(1279);

var _swaggerUi2 = _interopRequireDefault(_swaggerUi);

var _swaggerUiStandalonePreset = __webpack_require__(1714);

var _swaggerUiStandalonePreset2 = _interopRequireDefault(_swaggerUiStandalonePreset);

var _swaggerParser = __webpack_require__(1715);

var _swaggerParser2 = _interopRequireDefault(_swaggerParser);

var _swaggerUiKongTheme = __webpack_require__(1830);

var _common = __webpack_require__(17);

var _config = __webpack_require__(42);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function registerSwaggerSpec(swaggerSpec) {
  var swaggerUIOptions = {
    spec: swaggerSpec,
    dom_id: '#ui-wrapper',
    docExpansion: 'list',
    deepLinking: true,
    filter: true,
    presets: [_swaggerUi2.default.presets.apis, _swaggerUiStandalonePreset2.default],
    plugins: [_swaggerUiKongTheme.SwaggerUIKongTheme, _swaggerUi2.default.plugins.DownloadUrl],
    layout: 'KongLayout',
    oauth2RedirectUrl: (0, _config.GET_CONFIG_URL)('GUI')
  };

  swaggerUIOptions.theme = {
    swaggerAbsoluteTop: '80px',
    hasSidebar: false };

  if (window.snippetLanguages) {
    swaggerUIOptions.theme = (0, _extends3.default)({}, swaggerUIOptions.theme, {
      languages: window.snippetLanguages
    });
  }

  if (window.swaggerUIAdditionalOptions) {
    swaggerUIOptions = (0, _extends3.default)({}, swaggerUIOptions, window.swaggerUIAdditionalOptions);
  }

  var ui = (0, _swaggerUi2.default)(swaggerUIOptions);

  window.ui = ui;
}

function retrieveParsedSpec(name, spec) {
  if (!spec) {
    throw new Error('<p>Oops! Looks like we had trouble finding the spec: \'' + name + '\'</p>');
  }

  var contents = spec.contents;
  var parsedSpec = parseSpec(contents);

  if ((0, _common.isObject)(parsedSpec) === false) {
    throw new Error('<p>Oops! Something went wrong while parsing the spec: \'' + name + '\'</p>');
  }
  return parsedSpec;
}

function parseSpec(contents) {
  var parsedSpec = void 0;
  var errorArray = [];
  try {
    parsedSpec = JSON.parse(contents);
  } catch (jsonError) {
    errorArray.push('Error trying to parse JSON:<br>' + jsonError);

    try {
      parsedSpec = _yamlJs2.default.load(contents);
    } catch (yamlError) {
      errorArray.push('Error trying to parse YAML:<br>' + yamlError);
    }
  }

  _swaggerParser2.default.validate(parsedSpec, function (err, api) {
    if (err) {
      console.error(err);
    }
  });

  return parsedSpec === undefined ? errorArray : parsedSpec;
}

/***/ }),

/***/ 1342:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 1344:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 17:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.location = undefined;

var _keys = __webpack_require__(48);

var _keys2 = _interopRequireDefault(_keys);

var _stringify = __webpack_require__(68);

var _stringify2 = _interopRequireDefault(_stringify);

var _typeof2 = __webpack_require__(196);

var _typeof3 = _interopRequireDefault(_typeof2);

exports.renderError = renderError;
exports.getWorkspaceURL = getWorkspaceURL;
exports.getMetaTagContent = getMetaTagContent;
exports.sortAlphabetical = sortAlphabetical;
exports.isObject = isObject;
exports.stripTrailingSlash = stripTrailingSlash;
exports.getCurrentRoute = getCurrentRoute;
exports.navigateToHome = navigateToHome;
exports.navigateToUrl = navigateToUrl;
exports.decodeItem = decodeItem;
exports.encodeItem = encodeItem;
exports.forEach = forEach;
exports.getUrlParameter = getUrlParameter;
exports.addEvent = addEvent;
exports.recursiveErrorObjToString = recursiveErrorObjToString;
exports.getMessageFromError = getMessageFromError;
exports.capitalize = capitalize;
exports.transformMetaFields = transformMetaFields;

var _config = __webpack_require__(42);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function renderError(el, error) {
  el.classList.add('error');
  el.innerHTML = error;
}

function getWorkspaceURL(url) {
  var route = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var workspacePath = '/' + (0, _config.GET_CONFIG)('WORKSPACE');
  var routePath = route[0] === '/' ? route : '/' + route;

  if (workspacePath === '/default' || workspacePath === '/') {
    return '' + url + routePath;
  }

  return '' + url + workspacePath + routePath;
}

function getMetaTagContent(name, defaultValue, dom) {
  dom = dom != null ? dom : document;
  if (!dom) {
    return defaultValue;
  }

  var elements = dom.getElementsByName(name);
  var content = elements.length ? elements[0].content : defaultValue;
  var resp = content === '' || content && content.indexOf('{{') > -1 ? defaultValue : content;
  if (resp === 'null') {
    return '';
  }
  return resp;
}

function sortAlphabetical(a, b) {
  if (a < b) {
    return -1;
  } else if (a > b) {
    return 1;
  }
  return 0;
}

function isObject(item) {
  return (typeof item === 'undefined' ? 'undefined' : (0, _typeof3.default)(item)) === 'object' && !Array.isArray(item) && item !== null;
}

function stripTrailingSlash(string) {
  return string.slice(-1) === '/' ? string.slice(0, -1) : string;
}

function getCurrentRoute() {
  var initialRoute = window.location.pathname.slice(1) === '' ? 'index' : window.location.pathname.slice(1);
  var routeToLoad = stripTrailingSlash(initialRoute);
  return routeToLoad;
}

var location = exports.location = {
  setLocationHref: function setLocationHref(newHref) {
    window.location.href = newHref;
  },

  getLocationHref: function getLocationHref() {
    return window.location.href;
  }
};

function navigateToHome() {
  var url = (0, _config.GET_CONFIG_URL)('GUI');
  location.setLocationHref(url);
}

function navigateToUrl(url) {
  location.setLocationHref(url);
}

function decodeItem(item) {
  var decoded = void 0;

  try {
    decoded = atob(item);
    if (decoded && item) {
      return JSON.parse(decoded);
    }
  } catch (e) {
    return {};
  }

  return {};
}

function encodeItem(item) {
  return btoa((0, _stringify2.default)(item));
}

function forEach(array, callback, scope) {
  for (var i = 0; i < array.length; i++) {
    callback.call(scope, i, array[i]);
  }
}

function getUrlParameter(name) {
  name = name.replace(/[[]/, '\\[').replace(/[\]]/, '\\]');
  var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
  var results = regex.exec(window.location.search);
  return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}

function addEvent(parent, evt, selector, handler) {
  parent.addEventListener(evt, function (event) {
    if (event.target.matches(selector + ', ' + selector + ' *')) {
      handler.apply(event.target.closest(selector), arguments);
    }
  }, false);
}

function recursiveErrorObjToString(obj) {
  var str = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  return (0, _keys2.default)(obj).reduce(function (acc, key) {
    if (key === 'code') {
      return acc;
    }

    var value = obj[key];
    if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && value !== null) {
      return recursiveErrorObjToString(value, acc);
    }

    return '' + (acc && acc + ', ') + key + ': ' + value;
  }, str);
}

function getMessageFromError(error) {
  if (error.response && error.response.data) {
    if (error.response.data.message) {
      return error.response.data.message;
    }

    return recursiveErrorObjToString(error.response.data);
  }

  return error.message || 'There was an error';
}

var capitalizeRegEx = /(?:^|[\s-:'"])\w/g;

function capitalize(str) {
  return str.replace(capitalizeRegEx, function (a) {
    return a.toUpperCase();
  });
}

window.getMessageFromError = getMessageFromError;

function transformMetaFields(jsonStringMetaFields) {
  var schemaToConfigValidatorMap = {
    string: 'text',
    number: 'number'
  };
  var metaFields = jsonStringMetaFields.map(function (field) {
    return {
      field_name: field.title,
      input: field.label,
      type_of_input: field.is_email ? 'email' : schemaToConfigValidatorMap[field.validator.type],
      required: field.validator.required
    };
  });
  return metaFields;
}

/***/ }),

/***/ 1817:
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 42:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GET_CONFIG_URL = exports.KONG_CONFIGS = undefined;
exports.GET_CONFIG = GET_CONFIG;

var _common = __webpack_require__(17);

var KONG_CONFIGS = {
  PORTAL_AUTH: null,
  PORTAL_API_URL: null,
  PORTAL_API_PORT: '8004',
  PORTAL_API_SSL_PORT: '8447',
  PORTAL_GUI_URL: 'http://127.0.0.1:8003',
  PORTAL_GUI_PORT: '8003',
  PORTAL_GUI_SSL_PORT: '8443',
  PORTAL_IS_AUTHENTICATED: false,
  PORTAL_GUI_USE_SUBDOMAINS: false,
  RBAC_ENFORCED: 'false',
  RBAC_HEADER: 'Kong-Admin-Token',
  KONG_VERSION: 'false',
  WORKSPACE: 'default',
  PORTAL_DEVELOPER_META_FIELDS: [{
    label: 'Full Name',
    title: 'full_name',
    validator: {
      required: true,
      type: 'string'
    }
  }]
};

window.K_CONFIG = ['PORTAL_AUTH', 'PORTAL_API_URL', 'PORTAL_GUI_SSL_PORT', 'RBAC_HEADER', 'KONG_VERSION', 'PORTAL_GUI_PORT', 'PORTAL_API_SSL_PORT', 'PORTAL_GUI_URL', 'PORTAL_API_PORT', 'PORTAL_IS_AUTHENTICATED', 'PORTAL_GUI_USE_SUBDOMAINS', 'RBAC_ENFORCED', 'WORKSPACE', 'PORTAL_DEVELOPER_META_FIELDS'].reduce(function (acc, key) {
  acc[key] = (0, _common.getMetaTagContent)('KONG:' + key, KONG_CONFIGS[key]);

  if (key === 'PORTAL_DEVELOPER_META_FIELDS') {
    try {
      acc[key] = JSON.parse(acc[key]);
    } catch (e) {
      acc[key] = [];
    }
  }

  return acc;
}, {});

function GET_CONFIG_URL() {
  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'API';

  var typeU = type.toUpperCase();

  if (['API', 'GUI'].indexOf(typeU) === -1) {
    throw new Error('Not a valid uri config type.');
  }

  var port = window.location.protocol.toLowerCase() === 'https:' ? GET_CONFIG('PORTAL_' + typeU + '_SSL_PORT') : GET_CONFIG('PORTAL_' + typeU + '_PORT');
  var baseUrl = window.location.protocol + '//' + window.location.hostname + ':' + port;

  return GET_CONFIG('PORTAL_' + typeU + '_URL') || baseUrl;
}

function GET_CONFIG(name) {
  var value = window.K_CONFIG ? window.K_CONFIG[name] : null;

  if (value === '' || value == null) {
    return KONG_CONFIGS[name] ? KONG_CONFIGS[name] : '';
  }

  try {
    return JSON.parse(value);
  } catch (e) {
    return value;
  }
}

window.GET_CONFIG = GET_CONFIG;

exports.KONG_CONFIGS = KONG_CONFIGS;
exports.GET_CONFIG_URL = GET_CONFIG_URL;

/***/ })

},[1276]);